//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.05.26 at 12:27:28 PM EDT 
//


package org.mitre.eren.protocol.edxl_rm;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for PersonNameTypeList.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="PersonNameTypeList">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}normalizedString">
 *     &lt;enumeration value="Alias"/>
 *     &lt;enumeration value="LegalName"/>
 *     &lt;enumeration value="KnownAs"/>
 *     &lt;enumeration value="MaidenName"/>
 *     &lt;enumeration value="FormerName"/>
 *     &lt;enumeration value="CommonUse"/>
 *     &lt;enumeration value="NameAtBirth"/>
 *     &lt;enumeration value="PreferredName"/>
 *     &lt;enumeration value="OfficialName"/>
 *     &lt;enumeration value="UnofficialName"/>
 *     &lt;enumeration value="NickName"/>
 *     &lt;enumeration value="PetName"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "PersonNameTypeList", namespace = "urn:oasis:names:tc:ciq:xnl:3")
@XmlEnum
public enum PersonNameTypeList {

    @XmlEnumValue("Alias")
    ALIAS("Alias"),
    @XmlEnumValue("LegalName")
    LEGAL_NAME("LegalName"),
    @XmlEnumValue("KnownAs")
    KNOWN_AS("KnownAs"),

    /**
     * Name of an individual before marriage.
     * 
     */
    @XmlEnumValue("MaidenName")
    MAIDEN_NAME("MaidenName"),

    /**
     * Former name of the person
     * 
     */
    @XmlEnumValue("FormerName")
    FORMER_NAME("FormerName"),

    /**
     * Name that is commonly used by others, e.g. a simplified form of the official name.
     * 
     */
    @XmlEnumValue("CommonUse")
    COMMON_USE("CommonUse"),

    /**
     * A name given to an individual at birth, but later changed (common in some cultures)
     * 
     */
    @XmlEnumValue("NameAtBirth")
    NAME_AT_BIRTH("NameAtBirth"),

    /**
     * Indicates that the party prefers to be called by this name
     * 
     */
    @XmlEnumValue("PreferredName")
    PREFERRED_NAME("PreferredName"),

    /**
     * An official name of the person, e.g. as in the passport. incorporation certificate, etc.
     * 
     */
    @XmlEnumValue("OfficialName")
    OFFICIAL_NAME("OfficialName"),
    @XmlEnumValue("UnofficialName")
    UNOFFICIAL_NAME("UnofficialName"),
    @XmlEnumValue("NickName")
    NICK_NAME("NickName"),
    @XmlEnumValue("PetName")
    PET_NAME("PetName");
    private final String value;

    PersonNameTypeList(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static PersonNameTypeList fromValue(String v) {
        for (PersonNameTypeList c: PersonNameTypeList.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
